function [u_sol,u_out,xx,yy]=data_gen_aperture(khv,incdir,sensors,len2,Np,Ncheb,domain)
%%%%% Used to generate data
% INPUT
% khv -> vector of frequencies
% incdir -> struct of incoming directions. It has the length(khv).
%           incdir(i).directions(2XNd) -> directions of incidence at
%           frequency khv(i)
%           incdir(i).directions(1,1:Nd): x-coordinate
%           incdir(i).directions(1,1:Nd): y-coordinate
%           Nd is the number of directions at each frequency
% sensors -> struct of sensors location. It has dimensions length(khv).
%            sensors(i).dir -> it has the length of Nd for each
%            sensors(i).dir(j).position(2xNs) ->location of sensors for
%            incoming wave with direction incdir(i).dir(j) at frequency
%            khv(i).
%            sensors(i).dir(j).position(1,1:Ns): x-coordinate
%            sensors(i).dir(j).position(2,1:Ns): y-coordinate
% domain -> domain as set in LOCAL_BUMP
% Please don't change len2, Np and Ncheb
% len2 -> size of domain. 
% Np -> number of points
% Ncheb -> number of chebyshev nodes
%
% OUTPUT
% u_sol -> measurements at sensor. Struct of length khv of the form
%          u_sol(i).dir(j).field(1:Ns) -> vector of measurements on the
%          sensors generate by the incoming plane wave with incident
%          direction incdir(i).direction(j) and frequency khv(i)
% u_out -> equivalent of above, but the field at the domain points and not
%          sensors generated by the incoming plane wave with incident
%          direction incdir(i).direction(j) and frequency khv(i)
% xx -> x coordinates of points in the domain
% yy -> y coordinates of points in the domain

for ikh=1:length(khv)

    kh=khv(ikh);
    
    %initiating parameters
    PARAMETERS.kh=kh;
    PARAMETERS.directions=incdir(ikh).directions;%this is a 2xn vector
    PARAMETERS.sensors = sensors(ikh);%this is a struct PARAMETERS.sensors.directions(id).position
    PARAMETERS.len2=len2;
    PARAMETERS.Np=Np;
    PARAMETERS.Ncheb=Ncheb;

    %creating nodes        
    PARAMETERS.type=domain(1);
    domain_type = domain(1);
    if PARAMETERS.type ~=99
        PARAMETERS.domain=domain(1);
    else
        PARAMETERS.domain=domain(4:end);
        PARAMETERS.nmodes = domain(3);
    end
    tic
    [NODES,xx,yy,indplot,leaf_list]=create_NODES_v1(PARAMETERS,PARAMETERS.domain);

    %creating operators for contrast q
    OPERATORS=calculate_operators(NODES,yy,PARAMETERS);
    OPERATORS.leaf_list=leaf_list;
    time_fact=toc;
    fprintf('Time to factorize for kh=%d is %d\n',kh,time_fact);

    %calculating incident wave
    d=incdir(ikh).directions;
    itheta = size(d,2);
    nxx=length(xx(1,:));
    khxx1=kh*xx(1,:)';
    khxx2=kh*xx(2,:)';
    khxx=repmat(khxx1,1,itheta).*repmat(d(1,:),nxx,1)+repmat(khxx2,1,itheta).*repmat(d(2,:),nxx,1);
    ima = sqrt(-1);
    u_inc = cos(khxx)+ima*sin(khxx);

    %calculating with noise to check if the function is right
    fsource=repmat(LOCAL_bump(xx(1,:),xx(2,:),domain),itheta,1).*transpose(u_inc);            
    [u_meas,out]=calculate_scat_field_aperture(NODES,OPERATORS,PARAMETERS,xx,yy,fsource);

    %setting the solution for each wavenumber
    u_sol(ikh).direction=u_meas;
    u_out(ikh).field=out;
    clear u_meas
    clear NODES
    clear OPERATORS
    clear PARAMETERS
end